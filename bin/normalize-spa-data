#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application',  __dir__)
require_relative '../config/boot'
require_relative '../config/environment'

require 'csv'

unless ARGV.size == 2
  puts "Usage: #{__FILE__} /input/csv/dir /output/csv/dir"
  exit 1
end

ARGV.each do |dir|
  unless Dir.exists? dir
    puts "The directory #{dir} does not exist"
    exit 1
  end
end

INPUT_PATH = ARGV[0]
OUTPUT_PATH = ARGV[1]

def csv_enumerator(filename)
  Enumerator.new do |out|
    CSV.foreach(filename, headers: true, converters: [:blank_to_nil, :numeric]) do |row|
      out << row
    end
  end
end

def write_output(filename, data, headers)
  full_filename = File.join(OUTPUT_PATH, filename)
  puts "Writing #{full_filename}"

  CSV.open(full_filename, "wb") do |csv|
    csv << headers
    data.each do |f|
      csv << headers.map { |h| f[h.to_sym] }
    end
  end

end

filenames = {
  facilities: "Facility.csv",
  facility_types: "FacilityType.csv",
  geoloc: "geoloc.csv",
  contact_info: "ContactInfo.csv",
  facilities_services: "FacilityService.csv",
  services: "MedicalService.csv",
  locations: "OrganizationUnit.csv",
}

dataset = filenames.map_values do |filename|
  csv_enumerator(File.join(INPUT_PATH, filename))
end

result = SpaNormalization.new(dataset).run

write_output "facilities.csv", result[:facilities], ["id", "name", "lat", "lng", "location_id", "facility_type", "contact_name", "contact_email", "contact_phone", "last"]
write_output "services.csv", result[:services], ["id", "name"]
write_output "facilities_services.csv", result[:facilities_services], ["facility_id", "service_id"]
write_output "locations.csv", result[:locations], ["id", "name", "parent_id"]
