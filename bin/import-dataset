#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application',  __dir__)
require_relative '../config/boot'
require_relative '../config/environment'

require 'csv'

# Yields all facilities and their provided services given a CSV input file.
#
# TODO: we still don't have a definitive data source for provided services
# nor a defined input format.
def each_fility(filename)
  all_services = ["basic_client_services", "client_records", "basic_laboratory_tests",
                  "advanced_laboratory_tests", "diagnostic_equipment", "child_health_services",
                  "family_planning_services", "anc_services", "pmtct_services", "malaria_services",
                  "maternal_health_services", "emergency_obstetric_care", "hiv_testing_and_counseling_services",
                  "non_communicable_disease__ncd", "tuberculosis_services", "tb_treatment",
                  "neglected_tropical_disease__ntd", "regular_electricity", "power_source", "regular_water",
                  "water_source", "visual_and_auditory_privacy", "latrine_type", "regular_communication",
                  "communication_equipment", "ambulance", "avg_travel_time_amb_stat", "medical_specialist",
                  "general_practicioner", "health_officer___integrated_emergency_surgical_officer", "bsc_nurse",
                  "diploma_nurse", "specialized_nurse", "diploma_midwife", "pharmacy_professionals",
                  "med_lab_professionals", "other_paramedics", "health_extension_worker", "supportive_staff"
                 ].map { |l| l.gsub("_", " ").strip.capitalize }

  def is_valid?(row)
    ["name", "facility_type", "lat", "long"].none? { |field| row[field].blank? }
  end

  CSV.foreach(filename, headers: true) do |row|
    if is_valid? row
      facility = {
        name: row["name"],
        kind: row["facility_type"],
        position: {
          lat: row["lat"],
          lon: row["long"]
        },
        services: all_services.sample(rand(5))
      }
      yield facility
    end
  end
end

# -----------------------------------------------------------

unless ARGV.size == 1
  puts "Usage: #{__FILE__} dataset.csv"
  exit 1
end

filename = ARGV[0]

unless File.exists? filename
  puts "Could not open file #{filename}"
  exit 1
end

imported_facilities = 0
imported_services = 0

facility_count_by_service = Hash.new(0)

each_fility(filename) do |facility|
  if ElasticsearchService.instance.index_facility(facility)
    imported_facilities += 1

    facility[:services].each do |s|
      facility_count_by_service[s] += 1
    end
  end
end

facility_count_by_service.each do |service_name, count|
  service = {
    name: service_name,
    count: count
  }

  ElasticsearchService.instance.index_service service
  imported_services += 1
end

puts "Imported #{imported_facilities} facilities and #{imported_services} services."
