#!/usr/bin/env ruby
APP_PATH = File.expand_path('../../config/application',  __dir__)
require_relative '../config/boot'
require_relative '../config/environment'
require "benchmark"
require 'zip'

unless ARGV.size == 1
  puts "Usage: #{__FILE__} path/to/csvs/directory"
  exit 1
end

input_path = ARGV[0]

ENV["ELASTICSEARCH_LOG"] ||= "0"

File.delete("data/full_dataset.zip") if File.exists?("data/full_dataset.zip")
ElasticsearchService.instance.drop_index rescue nil
ElasticsearchService.instance.setup_index
ElasticsearchService.instance.setup_mappings

def zip_for_download(dir_path)
  zip_directory = "full_dataset"
  zipped_file_name = "data/full_dataset.zip"
  entries = Dir.entries(dir_path).select { |e| !e.starts_with? "." }
  Zip::File.open(zipped_file_name, Zip::File::CREATE) do |zipfile|
    entries.each do |filename|
      zipfile.add("#{zip_directory}/#{filename}", dir_path + '/' + filename)
    end
  end
end

if File.file? input_path
  system("tar -xzvf #{input_path}")
  if $?.exitstatus == 0
    Indexing.index_csv_tables('data/input')
    zip_for_download('data/input')
  else
    puts "Error: could not extract input file"
    exit 1
  end
elsif Dir.exists? input_path
  Indexing.index_csv_tables(input_path)
  zip_for_download(input_path)
else
  puts "The directory #{input_path} does not exist"
  exit 1
end
